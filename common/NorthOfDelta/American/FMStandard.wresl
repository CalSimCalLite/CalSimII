/*************************************
FMStandard.wresl

Tom FitzHugh BOR 10/8/2010

Implements the Water Forum's American River Flow Management Standard.  The standard is summarized in the NMFS BO
Appendix 2-D, though not all the details necessary to understand this implementation are present there.  See Lower
American River Flow Management Standard report (July 2006) and especially the 2008 Technical Report revising the
standard (July 2008) for all the details.  Note that there are some differences between the July 2008 report and
the implementation here.  The differences are:

(1) The report uses the Impaired Folsom Inflow Index as the index flow for Mar-Sept, but this code uses the Impaired
Nimbus Inflow Index instead.  This is the reason why the index curve in the FMP_Trigger.table for Mar-Sept is not
the same as the one in the report.

(2) Conference year and off-ramp conditions are not implemented using all the criteria described in the report.  Instead
the index curves are extended down to a minimum value which corresponds to the appropriate minimum flow (250 cfs from
Jan-Sept 15 and 500 from Sept 16-Dec 30) for extremely dry conditions.

(3) Certain discretionary adjustments (water conservation and fish protection) are not included in this code, because
it is not possible to model those in Calsim/CalLite.

Evaporation forecasts are based on average relations between storage in a prior month and evap, generated using outputs
from the Calsim Apr BO study.  All calcs in TAF.
May-Sept evap estimate in Mar: 0.072 * end of Feb storage    correlation coefficient of relationship: 0.64
May-Sept evap estimate in June: 0.042 * end of May storage   correlation coefficient of relationship: 0.96
Mar-May evap estimate in Mar: 0.026 * end of Feb storage     correlation coefficient of relationship: 0.71
June-Sept evap estimate in June: 0.034 * end of May storage  correlation coefficient of relationship: 0.95
**************************************/

! Calculate the forecasted impaired inflow into Folsom (IFII) during May-Sept based on perfect foresight
define AmerFrcstInflow {
    case MAR_SEP {
                condition       month >= MAR .and. month <= SEP
                sum(i=-(month-MAY),SEP-month)  I8(i)*cfs_taf(i) + I300(i)*cfs_taf(i) } ! sum of the May to Sept inflow
    case other {
        condition       always
        value           0.0   }
}
! Calculate the forecasted diversions from Folsom Reservoir and Folsom South Canal during May-Sept
define AmerFrcstDivs {
    case MAR_SEP {
                condition       month >= MAR .and. month <= SEP
                sum(i=-(month-MAY),SEP-month)  min(dem_D8b_pmi_ann(i), dem1_D8b_pmi_a * perdel_cvpmi_sys) * perdem_70Fol(i)
              + min(dem_D8e_pmi_ann(i), dem1_D8e_pmi_a * perdel_cvpmi_sys) * perdem_70SJWDS(i)
              + min(dem_D8f_pmi_ann(i), dem1_D8f_pmi_a * perdel_cvpmi_sys) * perdem_70ElDor(i)
              + min(dem_D8g_pmi_ann(i), dem1_D8g_pmi_a * perdel_cvpmi_sys) * perdem_70Rose(i)
              + min(dem_D8h_pmi_ann(i), dem1_D8h_pmi_a * perdel_cvpmi_sys) * perdem_70pcwa(i)
              + min(dem_D8i_pmi_ann(i), dem1_D8i_pmi_a * perdel_cvpmi_sys) * perdem_70ElDorCo(i)
              + min(dem_D9ab_pmi_ann(i), dem1_D9ab_pmi_a * perdel_cvpmi_sys) * perdem_70CARec(i)
              + min(dem_D9b_pmi_ann(i), dem1_D9b_pmi_a * perdel_cvpmi_sys) * perdem_70SMUD(i)
!              + min(dem_D300_pmi_ann(i), dem1_D300_pmi_a * perdel_cvpmi_sys) * perdem_70PCWA(i)
              + dem_D8a_wr_ann(i) * perdem_70NRWD(i)
              + dem_D8b_wr_ann(i) * perdem_70Fol(i)
              + dem_D8c_wr_ann(i) * perdem_70FolP(i)
              + dem_D8d_wr_ann(i) * perdem_70SJWDP(i)
              + dem_D8e_wr_ann(i) * perdem_70SJWDS(i)
              + dem_D8f_wr_ann(i) * perdem_70ElDor(i)
              + dem_D8g_wr_ann(i) * perdem_70Rose(i)
              + dem_D8h_wr_ann(i) * perdem_70PCWA(i)
              + dem_D9b_wr_ann(i) * perdem_70SMUD(i)
              + dem_D9aa_wr_ann(i) * perdem_70SCWC(i)
              + dem_D300_wr_ann(i) * perdem_70PCWA(i)
              + dem_D9a_pls(i) * cfs_taf(i) }
    case other {
        condition       always
        value           0.0   }
}

define AmerDivtest {alias AmerFrcstDivs kind 'test' units 'taf'}

! Calculate the forecasted evap from Folsom during May-Sept.
! Computed in Mar using end of Feb storage and coefficient 1.19 and re-computed in June using end of May
! storage and coefficient 0.66.  Recomputation for June is mentioned in 2008 report.
! NOTE that the only time these calcs are actually used to set a standard is in Mar and June
! (see loop minflowFMPAmer), so only need to adjust computation in June.
define AmerFrcstEvap {
    case MAR_APR {
        condition       month >= MAR .and. month <= MAY
                value 0.072 * S8(FEB-month) }
    case JUNE_SEP {
         condition      month >= JUN .and. month <= SEP
                value 0.042 * S8(MAY-month) }
    case other {
        condition       always
                value           0.0   }
}
!Evaporation computed using end of May storage and coefficient 0.56
define Evap_Folsm_JuneSept {
    case JUNE {
        condition       month == JUN
                value 0.034 * S8(-1)}
    case other {
        condition       always
                value           0.0   }
}
! Calculate the forecasted Folsom inflow - diversions from Folsom Reservoir and Folsom South Canal - Folsom evaporation during June-Sept
define AmerFrcstSummer {
    case JUN_SEP {
                condition       month == JUN
                sum(i=-(month-JUN),SEP-month) I8(i)*cfs_taf(i) + I300(i)*cfs_taf(i)
              - min(dem_D8b_pmi_ann(i), dem1_D8b_pmi_a * perdel_cvpmi_sys) * perdem_70Fol(i)
              - min(dem_D8e_pmi_ann(i), dem1_D8e_pmi_a * perdel_cvpmi_sys) * perdem_70SJWDS(i)
              - min(dem_D8f_pmi_ann(i), dem1_D8f_pmi_a * perdel_cvpmi_sys) * perdem_70ElDor(i)
              - min(dem_D8g_pmi_ann(i), dem1_D8g_pmi_a * perdel_cvpmi_sys) * perdem_70Rose(i)
              - min(dem_D8h_pmi_ann(i), dem1_D8h_pmi_a * perdel_cvpmi_sys) * perdem_70pcwa(i)
              - min(dem_D8i_pmi_ann(i), dem1_D8i_pmi_a * perdel_cvpmi_sys) * perdem_70ElDorCo(i)
              - min(dem_D9ab_pmi_ann(i), dem1_D9ab_pmi_a * perdel_cvpmi_sys) * perdem_70CARec(i)
              - min(dem_D9b_pmi_ann(i), dem1_D9b_pmi_a * perdel_cvpmi_sys) * perdem_70SMUD(i)
!              - min(dem_D300_pmi_ann(i), dem1_D300_pmi_a * perdel_cvpmi_sys) * perdem_70PCWA(i)
              - dem_D8a_wr_ann(i) * perdem_70NRWD(i)
              - dem_D8b_wr_ann(i) * perdem_70Fol(i)
              - dem_D8c_wr_ann(i) * perdem_70FolP(i)
              - dem_D8d_wr_ann(i) * perdem_70SJWDP(i)
              - dem_D8e_wr_ann(i) * perdem_70SJWDS(i)
              - dem_D8f_wr_ann(i) * perdem_70ElDor(i)
              - dem_D8g_wr_ann(i) * perdem_70Rose(i)
              - dem_D8h_wr_ann(i) * perdem_70PCWA(i)
              - dem_D9b_wr_ann(i) * perdem_70SMUD(i)
              - dem_D9aa_wr_ann(i) * perdem_70SCWC(i)
              - dem_D300_wr_ann(i) * perdem_70PCWA(i)
              - dem_D9a_pls(i) * cfs_taf(i)
              - (Evap_Folsm_JuneSept / 4)} !Evap computed above was total for 4 months, so need to divide by 4 here
    case other {
        condition       always
        value           0.0   }
}

define Evap_Folsm_MarMay {
    case MAR {
        condition       month == MAR
                value 0.026 * S8(-1)}
    case other {
        condition       always
                value           0.0   }
}
! Calculate the forecasted May water balance by using the Mar through May inflow - Mar through May diversions from Folsom Reservoir and Folsom South Canal - Mar through May Folsom evaporation
define AmerFrcstSpring {
    case MARforecast{
                condition       month == MAR
                sum(i=-(month-MAR),MAY-month) I8(i)*cfs_taf(i) + I300(i)*cfs_taf(i)
              - min(dem_D8b_pmi_ann(i), dem1_D8b_pmi_a * perdel_cvpmi_sys) * perdem_70Fol(i)
              - min(dem_D8e_pmi_ann(i), dem1_D8e_pmi_a * perdel_cvpmi_sys) * perdem_70SJWDS(i)
              - min(dem_D8f_pmi_ann(i), dem1_D8f_pmi_a * perdel_cvpmi_sys) * perdem_70ElDor(i)
              - min(dem_D8g_pmi_ann(i), dem1_D8g_pmi_a * perdel_cvpmi_sys) * perdem_70Rose(i)
              - min(dem_D8h_pmi_ann(i), dem1_D8h_pmi_a * perdel_cvpmi_sys) * perdem_70pcwa(i)
              - min(dem_D8i_pmi_ann(i), dem1_D8i_pmi_a * perdel_cvpmi_sys) * perdem_70ElDorCo(i)
              - min(dem_D9ab_pmi_ann(i), dem1_D9ab_pmi_a * perdel_cvpmi_sys) * perdem_70CARec(i)
              - min(dem_D9b_pmi_ann(i), dem1_D9b_pmi_a * perdel_cvpmi_sys) * perdem_70SMUD(i)
!              - min(dem_D300_pmi_ann(i), dem1_D300_pmi_a * perdel_cvpmi_sys) * perdem_70PCWA(i)
              - dem_D8a_wr_ann(i) * perdem_70NRWD(i)
              - dem_D8b_wr_ann(i) * perdem_70Fol(i)
              - dem_D8c_wr_ann(i) * perdem_70FolP(i)
              - dem_D8d_wr_ann(i) * perdem_70SJWDP(i)
              - dem_D8e_wr_ann(i) * perdem_70SJWDS(i)
              - dem_D8f_wr_ann(i) * perdem_70ElDor(i)
              - dem_D8g_wr_ann(i) * perdem_70Rose(i)
              - dem_D8h_wr_ann(i) * perdem_70PCWA(i)
              - dem_D9b_wr_ann(i) * perdem_70SMUD(i)
              - dem_D9aa_wr_ann(i) * perdem_70SCWC(i)
              - dem_D300_wr_ann(i) * perdem_70PCWA(i)
              - dem_D9a_pls(i) * cfs_taf(i)
              - (Evap_Folsm_MarMay / 3)} !Evap computed above was total for 3 months, so need to divide by 3 here
    case other {
        condition       always
        value           0.0   }
}

define AmerSumtest {alias AmerFrcstSummer kind 'test' units 'taf'}
define AmerSprtest {alias AmerFrcstSpring kind 'test' units 'taf'}

! Compute Folsom trigger storage for FMP flows, used in lookup table below
define amerFMPTrigger {
    case OctDec {
        condition   month>=OCT .and. month<=DEC
                value                   S8(prevSEP) + UARM(prevSEP) }  ! Computes Four Reservoir Index
    case JanFeb {
        condition   month>=JAN .and. month<=FEB
                value                   S8(-1) }    ! No need for a trigger in Jan-Feb since SRI year type determines standard (see code below)
    case MarSep {
        condition   always
                value           AmerFrcstInflow }   ! Computes Impaired Folsom Inflow Index
}

define C9_imp_flow {alias amerFMPTrigger kind 'IMP_FLOW' units 'CFS'}
define C9_fmp_mif {std kind 'INIT_FLOW' units 'CFS'}    !defined so previous month's final min flow can be retrieved

!lookup the flow prescription
define minFMPAmerTmp {select fmpflow from FMP_Trigger given trigger=amerFMPTrigger use linear where month=month} !Select the initial minflow from the lookup table using the trigger defined above

define C9_trig {alias amerFMPTrigger kind 'FLOW' units 'CFS'}     !save the trigger to DSS
define C9_fmp_tmp {alias minFMPAmerTmp kind 'FLOW' units 'CFS'}    !save the initial minflow to DSS

!lookup the SRI yeartype from input
define sri_ytp {select sriytpnum from SRI_bp given BreakP=SRI use minimum}
define sri_ytp_ {alias sri_ytp kind 'INDEX' units 'NONE'}

! Forecast minimum FMP from June to Sep for use in forecasting storage
define FMPfrcstJunSep {
		value minFMPAmerTmp*(122.*1.9835/1000.)}     !122 days between Jun 1 and Sep 30
define FMPfrcstJunSepdv {alias FMPfrcstJunSep kind 'flow' units 'taf'}

define EOMayForecast {   ! In March, computes end of May projected Folsom storage
    case MarForecast {
        condition       month == MAR
        value           S8(-1)+AmerFrcstSpring-(minFMPAmerTmp*(92.*1.9835/1000.))   }    !92 days between Mar 1 and May 31
    case other {
        condition       always
        value           0.   }
 }

! Estimate the end-of-September Folsom storage for the June minimum flow adjustment.  Select either 650 TAF or the previous May storage + 
define EOSepFolFrcst {
    case JunForecast {
        condition       month>=JUN .and. month<=SEP
        value           min(650., S8(prevMAY)+ AmerFrcstSummer - FMPfrcstJunSep) }           !S8level5 (flood control curve) minimum is 650 
    case other {
        condition       always
        value           0.   }
 }
define EOSepFolFrcstdv {alias EOSepFolFrcst kind 'storage' units 'TAF'}  ! Write EOSepForecast to DSS

! define D893min to be used by minflowFMPAmer
define D893min {select HStmin                    
             from   HSt_base
             where  month=month, AmerD893=1		! looking up D893 requirement for non-conference years,  for Water Forum.
}

! define UIFR_YR to be used by minflowFMPAmer for conference year determination
define UIFR_YR { 
	case after_October {					!Use UIFR value for March to February 
	      condition month >= OCT .and. month <= FEB
		  select UIFR 
		  from UIFR
		  where year = Wateryear - 1.} 
	case rest {
	      condition always
		  select UIFR 
		  from UIFR
		  where year = Wateryear}
}
define UIFR_YR_dv {alias UIFR_YR kind 'alias' units 'none'}  ! write unimpaired inflow to Folsom reservoir to DV file

! redefine minflow using initial minimum flow values and FMS program rules
define minflowFMPAmer1 {
        ! Conference year flow
        case confyr {                                                         ! if it is a conference year, UIFR<=400, set FMP to D893 flows
				condition    UIFR_Yr <= 400
				value        D893min  }
        ! Oct - Dec FMS flows
        case OctMax {                                                             !if initial standard >= 2000, then Oct stays at 1500
                condition    month==OCT .and. minFMPAmerTmp > 1500.
                value        1500. }
        case NovMax {                                                             !if initial standard >= 2000, then Nov steps up from 1500 to 1750 on Nov 2, from 1750 to 2000 on Nov 9
                condition    month==NOV .and. minFMPAmerTmp >= 2000.              !This is spawning flow prescriptive adjustment
                value        ((1500.*1) + (1750.*7) + (2000.*22))/30 }
        case OctMin {                                                               ! if initial standard <= 1500, then use that value as standard in Oct-Dec
                condition    month>=OCT .and. month<=DEC .and. minFMPAmerTmp <= 1500.
                value        (minFMPAmerTmp) }
        case DecOther {
				condition    month==DEC .and. minFMPAmerTmp > 1500. 
				value        max(minFMPAmerTmp, 1500.)}
        !Spawning flow prescriptive adjustment
        case NovOther {                                                           ! if initial standard greater than 1500, If prescribing greater than 1500, flow progresses from 1500 to the initial standard
                condition    month==NOV .and. minFMPAmerTmp > 1500.  
                value        ((1500.*1) + (max(minFMPAmerTmp - 250., 1500.)*7) + (max(minFMPAmerTmp, 1500.)*22)) / 30 }
		! Off-Ramp Condition
        case JanFebC {
			condition       month>=JAN .and. month<=FEB .and. sri_ytp == 5 .and. C9_fmp_mif(-1) >= 800.     ! If SRI is critical and Dec FMP is >= 800 then Jan FMP is 85% of Dec or 800 cfs whichever is less.  Feb is the same except it uses Jan FMP instead of Dec.
			value           max(800., min(1750., (0.85 * C9_fmp_mif(-1)))) }
	! January Flows
	case JanDBN {
			condition       month==JAN .and. S8(-1)>=300. .and. sri_ytp >= 3              ! If SRI is BN/D and December's storage was greater than 300 TAF, then FMP is December's FMP but no greater than 1750
			value           max(800., min(1750.,C9_fmp_mif(-1))) }
	case JanANW {
			condition       month==JAN .and. S8(-1)>=300.  .and. sri_ytp <= 2              ! If SRI is AN/W then FMP is 1750
			value           1750.}
	!January Storage-Based Adjustments
	case JanLoSto {
			condition       month==JAN .and. S8(-1) < 300. .and. S8Level5(-1) > S8(-1)    ! SAFCA diagram can on rare occasion require more than 625 TAF of FC space be maintained in Folsom.
			value           max(800., min(1750.,0.85 * C9_fmp_mif(-1))) }                 ! If End-of-Dec storage is below 300 TAF, drop flow to 85% of Dec FMP
	! February	Flows
	case FebDBN {
			condition       month==FEB .and. S8(-1)>=350. .and. sri_ytp >= 3              ! If SRI is BN/D and January's storage was greater than 350 TAF, then FMP is January's FMP but no greater than 1750
			value           max(800., min(1750.,C9_fmp_mif(-1))) }				
	case FebANW {
			condition       month==FEB .and. S8(-1)>=350. .and. sri_ytp <= 2             ! If SRI is AN/W then FMP is 1750
			value           1750.}				
	!February Storage-Based Adjustments
	case FebLoSto {
			condition       month==FEB .and. S8(-1) < 350. .and. S8Level5(-1) > S8(-1)    ! SAFCA diagram can on rare occasion require more than 625 TAF of FC space be maintained in Folsom.
			value           max(800., min(1750.,0.85 * C9_fmp_mif(-1))) }                 ! If End-of-Jan storage is  below 350 TAF, drop flow to 85% of Jan FMP
        ! Flow Adjustments based on End-of-May Folsom Reservoir Storage
	case MarLow {                                                             ! Avoid going up in release if End-of-May storage isn't going to hit 700 TAF  !min flow for 92 days
			condition       month==MAR .and.  EOMayForecast < 700.
			value           min(minFMPAmerTmp, C9_fmp_mif(-1)) }                        ! If EOMay Folsom Storage is forecasted to be < 700 TAF, then use the IFII-based FMP or the Feb FMP, whichever is less
	case MarOther {                                                                  
			condition       month==MAR .and. EOMayForecast >= 700.                      ! If EOMay Folsom Storage is forecasted to be >= 700 TAF, then use IFII-based FMP
			value           minFMPAmerTmp }
	case APRMay {
			condition       month>=APR .and. month<=MAY
			value          C9_fmp_mif(-1)}                                           !In APR and MAY use FMP determined for March
       !Flow Adjustments based on End-of-Sept Folsom Reservoir Storage
	case JunMin {
			condition       month==JUN .and. EOSepFolFrcst < 300.                   !If the EOSept Folsom storage is forecasted to be < 300 TAF, then reduce the FMP to a flow that would reach 300 TAF, but not less than 250 cfs
			value           min(1750., minFMPAmerTmp, (max(250.,minFMPAmerTmp-(300.- EOSepFolFrcst)*1000./(1.9835*122.))))}
	case Junother {
			condition       month==Jun .and. EOSepFolFrcst >= 300. 
			value           minFMPAmerTmp }
	case JulAug {
			condition       month>=JUL .and. month<=AUG                              ! in Jul and Aug, use the FMP determined for June
			value           C9_fmp_mif(-1)}
	case SepMin {
			condition       month==SEP .and. EOSepFolFrcst < 300.
			value           C9_fmp_mif(-1)}     
	! Flow maintenance for Labor Day
	case Sept {
			condition       month==SEP .and. EOSepFolFrcst >= 300.
			value           (((C9_fmp_mif(-1) * 4.) + (min(C9_fmp_mif(-1), 1500.) * 11.) + (max(500., (min(C9_fmp_mif(-1), 1500.))) * 15. ))/ 30.) } ! set min flow after Labor Day to max of 1500 cfs, assume Labor Day on 4th day
	case other {
			condition       always
			value           C9_fmp_mif(-1)}
}

! off-ramp conditions based on storage < 200 taf in last month or forecasted for this month with minflow requirement defined above
! if either condition met, switch to D-893 flows for this month only
define minflowFMPAmer {
	case lastmonth {	
	      condition S8(-1) < 200
	      value D893min }
	case thismonth {	
	      condition (S8(-1) + I8*cfs_taf + I300*cfs_taf
		    - min(dem_D8b_pmi_ann, dem1_D8b_pmi_a * perdel_cvpmi_sys) * perdem_70Fol
		    - min(dem_D8e_pmi_ann, dem1_D8e_pmi_a * perdel_cvpmi_sys) * perdem_70SJWDS
		    - min(dem_D8f_pmi_ann, dem1_D8f_pmi_a * perdel_cvpmi_sys) * perdem_70ElDor
		    - min(dem_D8g_pmi_ann, dem1_D8g_pmi_a * perdel_cvpmi_sys) * perdem_70Rose
		    - min(dem_D8h_pmi_ann, dem1_D8h_pmi_a * perdel_cvpmi_sys) * perdem_70pcwa
		    - min(dem_D8i_pmi_ann, dem1_D8i_pmi_a * perdel_cvpmi_sys) * perdem_70ElDorCo
		    - min(dem_D9ab_pmi_ann, dem1_D9ab_pmi_a * perdel_cvpmi_sys) * perdem_70CARec
		    - min(dem_D9b_pmi_ann, dem1_D9b_pmi_a * perdel_cvpmi_sys) * perdem_70SMUD
	!              - min(dem_D300_pmi_ann, dem1_D300_pmi_a * perdel_cvpmi_sys) * perdem_70PCWA
		    - dem_D8a_wr_ann * perdem_70NRWD
		    - dem_D8b_wr_ann * perdem_70Fol
		    - dem_D8c_wr_ann * perdem_70FolP
		    - dem_D8d_wr_ann * perdem_70SJWDP
		    - dem_D8e_wr_ann * perdem_70SJWDS
		    - dem_D8f_wr_ann * perdem_70ElDor
		    - dem_D8g_wr_ann * perdem_70Rose
		    - dem_D8h_wr_ann * perdem_70PCWA
		    - dem_D9b_wr_ann * perdem_70SMUD
		    - dem_D9aa_wr_ann * perdem_70SCWC
		    - dem_D300_wr_ann * perdem_70PCWA
		    - dem_D9a_pls * cfs_taf
		    - minflowFMPAmer1 *cfs_taf) < 200
	      value D893min }
	case neither {
	      condition always
	      value minflowFMPAmer1 }
}

define JanFebCrit {  !Sets to value to indicate conditions in Jan and Feb
        case OctDec {
                condition    month>=OCT .and. month<=DEC
                value        0. }
        case JanBoth {
                condition    month==JAN .and. S8(-1) < 300. .and. S8Level5(-1) > S8(-1) .and. sri_ytp == 5
                value        3. }   ! low storage in Folsom not induced by flood control operations in a dritically dry year
        case JanSto {
                condition    month==JAN .and. S8(-1) < 300. .and. S8Level5(-1) > S8(-1)
                value        2. }   ! low storage in Folsom not induced by flood control operations, not a critically dry year
        case JanCrit {
                condition    month==JAN .and. sri_ytp == 5
                value        1. }   ! critically dry year but storage OK
        case FebBoth {
                condition    month==FEB .and. S8(-1) < 350. .and. S8Level5(-1) > S8(-1) .and. sri_ytp == 5
                value        3. }  ! low storage in Folsom not induced by flood control operations in a dritically dry year
        case FebSto {
                condition    month==FEB .and. S8(-1) < 350. .and. S8Level5(-1) > S8(-1)
                value        2. }  ! low storage in Folsom not induced by flood control operations, not a critically dry year
        case FebCrit {
                condition    month==FEB .and. sri_ytp == 5
                value        1. }  ! critically dry year but storage OK
        case JFOther   {
                condition    always
                value        0. }
}

define C9_jf_trig  {alias JanFebCrit kind 'CRITERIA' units 'NONE'}

goal set_C9_fmp_mif {C9_fmp_mif = minflowFMPAmer1}             ! create time series, saved this way so previous month conditions will use calculated flow, not offramp
define C9_fmp_mif_woff {std kind 'INIT_FLOW' units 'CFS'}
goal set_C9_fmp_mif_woff {C9_fmp_mif_woff = minflowFMPAmer}    ! final standard including off-ramp
define C9_fmp {alias minflowFMPAmer1 kind 'FLOW' units 'CFS'}     !save the final minflow to DSS

!define AmEvpMaySepAlias {alias AmerFrcstEvap kind 'test' units 'taf'}
define AmEvpJunSepAlias {alias Evap_Folsm_JuneSept kind 'test' units 'taf'}
define AmEvpMarMayAlias {alias Evap_Folsm_MarMay kind 'test' units 'taf'}

